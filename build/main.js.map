{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n * Info about BE smart meter on https://jensd.be/1183/linux/read-data-from-the-belgian-digital-meter-through-the-p1-port, including OBIS codes\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core'\nimport { ReadlineParser } from '@serialport/parser-readline'\nimport { format as fnsFormat, parse as parseDate } from 'date-fns'\nimport { SerialPort } from 'serialport'\nimport { OBIS_TRANSLATION, TariffEnum, ValueAndUnit, ValueAndUnitAndTimestamp } from './lib/types-and-consts'\n\n// Load your modules here, e.g.:\n\nclass BelgiumSmartMeterP1 extends utils.Adapter {\n    private serialPort?: SerialPort\n    private aggregateIntervals = 1\n    private aggregateCounter = 0\n    private discoveryReported: string[] = []\n    private aggregation: Record<string, number> = {}\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'belgium-smart-meter-p1',\n        })\n        this.on('ready', this.onReady.bind(this))\n        this.on('stateChange', this.onStateChange.bind(this))\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this))\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        const port = this.config.serialPort ?? 'com1'\n        const baudRate = this.config.baudrate ?? 115200\n        this.aggregateIntervals = this.config.aggregateIntervals ?? 10\n        this.aggregateCounter = 0\n        this.serialPort = new SerialPort({\n            path: port,\n            baudRate,\n        })\n\n        this.log.info(`serial port: ${port} @ ${baudRate}`)\n        const parser = this.serialPort.pipe(new ReadlineParser({ delimiter: '\\r\\n' }))\n        parser.on('data', (line: string) => this.processLineFromSerialPort(line))\n        //\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        await this.setObjectNotExistsAsync('testVariable', {\n            type: 'state',\n            common: {\n                name: 'testVariable',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: true,\n            },\n            native: {},\n        })\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        this.subscribeStates('testVariable')\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        await this.setStateAsync('testVariable', true)\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        await this.setStateAsync('testVariable', { val: true, ack: true })\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 })\n\n        // examples for the checkPassword/checkGroup functions\n        let result = await this.checkPasswordAsync('admin', 'iobroker')\n        this.log.info('check user admin pw iobroker: ' + result)\n\n        result = await this.checkGroupAsync('admin', 'admin')\n        this.log.info('check group user admin group admin: ' + result)\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            this.serialPort?.close()\n            callback()\n        } catch (e) {\n            callback()\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`)\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`)\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n\n    //#region `functions added by Stefaan`\n    private processLineFromSerialPort(line: string): void {\n        if (line.startsWith('!')) {\n            this.aggregateCounter++\n            return\n        }\n        if (!line || line.startsWith('/FLU')) return // ingore lines atrting with `!` and `/FLU`\n\n        const code = line.split('(')[0]\n        const parameter = OBIS_TRANSLATION[code]\n        if (parameter.type == 'ignore' || !parameter.regex) return\n\n        if (!parameter) {\n            this.log.warn(`unknown OBIS code ${code} - OBIS_TRANSLATION list must be extended`)\n            return\n        }\n        const match = line.match(parameter.regex)\n        if (!match) {\n            this.log.error(`no regex match on \"${line}\" with ${parameter.regex}`)\n            return\n        }\n\n        const report = this.aggregateCounter === 0\n\n        switch (parameter.type) {\n            case 'realWithUnit':\n                const rwu = this.parseRealWithUnit(match)\n                if (report) this.log.debug(`${parameter.name} -> ${rwu.value} ${rwu.unit}`)\n                break\n            case 'tariff':\n                const tariff = this.parseTariff(match)\n                if (report) this.log.debug(`tariff -> ${TariffEnum[tariff]}`)\n                break\n            case 'timestamp':\n                const timestamp = this.parseTimestamp(match)\n                if (report) this.log.debug(`timestamp ${fnsFormat(timestamp, 'Ppp')}`)\n                break\n            case 'gas':\n                const gas = this.parseGas(match)\n                if (report) this.log.debug(`gas ${gas.value} ${gas.unit} @ ${fnsFormat(gas.timestamp, 'Ppp')}`)\n                break\n            default:\n                break\n        }\n\n        if (this.aggregateCounter === this.aggregateIntervals) {\n            this.aggregateCounter = 0\n            this.log.debug(`=-=-=-=-=-= packet end =-=-=-=-=-=`)\n        }\n    }\n\n    private parseRealWithUnit(match: RegExpMatchArray): ValueAndUnit {\n        const value = parseFloat(match[1])\n        const unit = match[2]\n        return { value, unit }\n    }\n\n    private parseTariff(match: RegExpMatchArray): TariffEnum {\n        return parseInt(match[1]) as TariffEnum\n    }\n\n    private parseTimestamp(match: RegExpMatchArray): Date {\n        const capture = ('20' + match[1]).substring(0, 14)\n        return parseDate(capture, 'yyyyMMddHHmmss', new Date())\n    }\n\n    private parseGas(match: RegExpMatchArray): ValueAndUnitAndTimestamp {\n        const capture = ('20' + match[1]).substring(0, 14)\n        const timestamp = parseDate(capture, 'yyyyMMddHHmmss', new Date())\n        const value = parseFloat(match[2])\n        const unit = match[3]\n        return { value, unit, timestamp }\n    }\n    //#endregion `functions added by Stefaan`\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new BelgiumSmartMeterP1(options)\n} else {\n    // otherwise start the instance directly\n    ;(() => new BelgiumSmartMeterP1())()\n}\n"],
  "mappings": "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",
  "names": ["fnsFormat", "parseDate"]
}
